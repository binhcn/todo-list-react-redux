{"ast":null,"code":"var _jsxFileName = \"/home/binhcao/Desktop/task-management/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport TaskForm from './components/TaskForm';\nimport TaskControl from './components/TaskControl';\nimport TaskList from './components/TaskList';\nimport { connect } from 'react-redux';\nimport * as actions from './actions/index';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onToggleForm = () => {\n      var taskEditing = this.props.taskEditing;\n\n      if (taskEditing && taskEditing.id) {\n        this.props.onOpenForm();\n      } else {\n        this.props.onToggleForm();\n      }\n\n      this.props.onClearTask({\n        id: '',\n        name: '',\n        status: false\n      });\n    };\n\n    this.onSort = (sortBy, sortValue) => {\n      this.setState({\n        // Nhận từ state component dưới rồi chuyền props trở lại\n        sortBy,\n        sortValue\n      });\n    };\n\n    this.state = {\n      tasks: [],\n      sortBy: 'name',\n      // shouldn't object type\n      sortValue: 1\n    };\n  }\n\n  render() {\n    var _this$state = this.state,\n        tasks = _this$state.tasks,\n        sortBy = _this$state.sortBy,\n        sortValue = _this$state.sortValue;\n    var isDisplayForm = this.props.isDisplayForm;\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Task Management\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: isDisplayForm ? 'col-xs-4 col-sm-4 col-md-4 col-lg-4' : 'col-xs-0 col-sm-0 col-md-0 col-lg-0',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(TaskForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: isDisplayForm ? 'col-xs-8 col-sm-8 col-md-8 col-lg-8' : 'col-xs-12 col-sm-12 col-md-12 col-lg-12',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary\",\n      onClick: this.onToggleForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"fa fa-plus mr-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), \"Add your task\"), React.createElement(TaskControl, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row mt-15\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(TaskList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isDisplayForm: state.isDisplayForm,\n    taskEditing: state.taskEditing\n  };\n};\n\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    onToggleForm: () => {\n      dispatch(actions.toggleForm());\n    },\n    onClearTask: task => {\n      dispatch(actions.editTask(task));\n    },\n    onOpenForm: () => {\n      dispatch(actions.openForm());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/home/binhcao/Desktop/task-management/src/App.js"],"names":["React","Component","TaskForm","TaskControl","TaskList","connect","actions","App","constructor","props","onToggleForm","taskEditing","id","onOpenForm","onClearTask","name","status","onSort","sortBy","sortValue","setState","state","tasks","render","isDisplayForm","mapStateToProps","mapDispatchToProps","dispatch","toggleForm","task","editTask","openForm"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport TaskForm from './components/TaskForm';\nimport TaskControl from './components/TaskControl';\nimport TaskList from './components/TaskList';\nimport { connect } from 'react-redux';\nimport * as actions from './actions/index';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: [],\n      sortBy: 'name',         // shouldn't object type\n      sortValue: 1\n    }\n  }\n\n  onToggleForm = () => {\n    var {taskEditing} = this.props;\n    if(taskEditing && taskEditing.id){\n      this.props.onOpenForm();\n    }else{\n      this.props.onToggleForm();\n    }\n    this.props.onClearTask({\n      id: '',\n      name: '',\n      status: false\n    });\n  }\n\n  onSort = (sortBy, sortValue) => {\n    this.setState({             // Nhận từ state component dưới rồi chuyền props trở lại\n        sortBy,\n        sortValue\n    })\n  }\n\n  render() {\n    var { tasks, sortBy, sortValue } = this.state;\n    var {isDisplayForm} = this.props;\n\n    return (\n      <div className=\"container\">\n        <div className=\"text-center\">\n          <h1>Task Management</h1><hr />\n        </div>\n        <div className=\"row\">\n          <div className={isDisplayForm ? 'col-xs-4 col-sm-4 col-md-4 col-lg-4' : 'col-xs-0 col-sm-0 col-md-0 col-lg-0'}>\n            <TaskForm />\n          </div>\n          <div className={isDisplayForm ? 'col-xs-8 col-sm-8 col-md-8 col-lg-8' : 'col-xs-12 col-sm-12 col-md-12 col-lg-12'}>\n            <button type=\"button\" className=\"btn btn-primary\" onClick={this.onToggleForm}>\n              <span className=\"fa fa-plus mr-5\"></span>Add your task\n            </button>\n            <TaskControl />\n            <div className=\"row mt-15\">\n              <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                <TaskList />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n    isDisplayForm: state.isDisplayForm,\n    taskEditing: state.taskEditing\n\t}\n};\nconst mapDispatchToProps = (dispatch, props) => {\n\treturn {\n\t\tonToggleForm: () => {\n\t\t\tdispatch(actions.toggleForm())\n    },\n    onClearTask: task => {\n\t\t\tdispatch(actions.editTask(task))\n    },\n    onOpenForm: () => {\n\t\t\tdispatch(actions.openForm())\n\t\t}\n\t}\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}