{"ast":null,"code":"var _jsxFileName = \"/home/binhcao/Desktop/task-management/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport TaskForm from './components/TaskForm';\nimport TaskControl from './components/TaskControl';\nimport TaskList from './components/TaskList';\nimport { connect } from 'react-redux';\nimport * as actions from './actions/index';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onToggleForm = () => {\n      var taskEditing = this.props.taskEditing;\n\n      if (taskEditing && taskEditing.id) {\n        this.props.onOpenForm();\n      } else {\n        this.props.onToggleForm();\n      }\n\n      this.props.onClearTask({\n        id: '',\n        name: '',\n        status: false\n      });\n    };\n\n    this.onFilter = (filterName, filterStatus) => {\n      filterStatus = parseInt(filterStatus, 10);\n      this.setState({\n        filterName: filterName.toLowerCase(),\n        filterStatus\n      });\n    };\n\n    this.onSearch = keyword => {\n      this.setState({\n        keyword\n      });\n    };\n\n    this.onSort = (sortBy, sortValue) => {\n      this.setState({\n        // Nhận từ state component dưới rồi chuyền props trở lại\n        sortBy,\n        sortValue\n      });\n    };\n\n    this.state = {\n      tasks: [],\n      filterName: '',\n      filterStatus: -1,\n      keyword: '',\n      sortBy: 'name',\n      // shouldn't object type\n      sortValue: 1\n    };\n  }\n\n  render() {\n    var _this$state = this.state,\n        tasks = _this$state.tasks,\n        filterName = _this$state.filterName,\n        filterStatus = _this$state.filterStatus,\n        keyword = _this$state.keyword,\n        sortBy = _this$state.sortBy,\n        sortValue = _this$state.sortValue;\n    var isDisplayForm = this.props.isDisplayForm;\n\n    if (filterName) {\n      // !== null !== 0 !== undefined\n      tasks = tasks.filter(task => {\n        return task.name.toLowerCase().indexOf(filterName) !== -1;\n      });\n    }\n\n    tasks = tasks.filter(task => {\n      if (filterStatus === -1) return task;else return task.status === (filterStatus === 1 ? true : false);\n    });\n\n    if (keyword) {\n      tasks = tasks.filter(task => {\n        return task.name.toLowerCase().indexOf(keyword.toLowerCase()) !== -1;\n      });\n    }\n\n    if (sortBy === 'name') {\n      tasks.sort((a, b) => {\n        if (a.name > b.name) return sortValue;else if (a.name < b.name) return -sortValue;else return 0;\n      });\n    } else {\n      tasks.sort((a, b) => {\n        if (a.status > b.status) return -sortValue;else if (a.status < b.status) return sortValue;else return 0;\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Task Management\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: isDisplayForm ? 'col-xs-4 col-sm-4 col-md-4 col-lg-4' : 'col-xs-0 col-sm-0 col-md-0 col-lg-0',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(TaskForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: isDisplayForm ? 'col-xs-8 col-sm-8 col-md-8 col-lg-8' : 'col-xs-12 col-sm-12 col-md-12 col-lg-12',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary\",\n      onClick: this.onToggleForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"fa fa-plus mr-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), \"Add your task\"), React.createElement(TaskControl, {\n      onSearch: this.onSearch,\n      onSort: this.onSort,\n      sortBy: sortBy,\n      sortValue: sortValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row mt-15\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(TaskList, {\n      onFilter: this.onFilter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isDisplayForm: state.isDisplayForm,\n    taskEditing: state.taskEditing\n  };\n};\n\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    onToggleForm: () => {\n      dispatch(actions.toggleForm());\n    },\n    onClearTask: task => {\n      dispatch(actions.editTask(task));\n    },\n    onOpenForm: () => {\n      dispatch(actions.openForm());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/home/binhcao/Desktop/task-management/src/App.js"],"names":["React","Component","TaskForm","TaskControl","TaskList","connect","actions","App","constructor","props","onToggleForm","taskEditing","id","onOpenForm","onClearTask","name","status","onFilter","filterName","filterStatus","parseInt","setState","toLowerCase","onSearch","keyword","onSort","sortBy","sortValue","state","tasks","render","isDisplayForm","filter","task","indexOf","sort","a","b","mapStateToProps","mapDispatchToProps","dispatch","toggleForm","editTask","openForm"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport TaskForm from './components/TaskForm';\nimport TaskControl from './components/TaskControl';\nimport TaskList from './components/TaskList';\nimport { connect } from 'react-redux';\nimport * as actions from './actions/index';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: [],\n      filterName: '',\n      filterStatus: -1,\n      keyword: '',\n      sortBy: 'name',         // shouldn't object type\n      sortValue: 1\n    }\n  }\n\n  onToggleForm = () => {\n    var {taskEditing} = this.props;\n    if(taskEditing && taskEditing.id){\n      this.props.onOpenForm();\n    }else{\n      this.props.onToggleForm();\n    }\n    this.props.onClearTask({\n      id: '',\n      name: '',\n      status: false\n    });\n  }\n\n  onFilter = (filterName, filterStatus) => {\n    filterStatus = parseInt(filterStatus, 10);\n    this.setState({\n        filterName: filterName.toLowerCase(),\n        filterStatus\n    });\n  }\n\n  onSearch = (keyword) => {\n    this.setState({\n      keyword\n    });\n  }\n\n  onSort = (sortBy, sortValue) => {\n    this.setState({             // Nhận từ state component dưới rồi chuyền props trở lại\n        sortBy,\n        sortValue\n    })\n  }\n\n  render() {\n    var { tasks, filterName, filterStatus, keyword, sortBy, sortValue } = this.state;\n    var {isDisplayForm} = this.props;\n    if (filterName) {            // !== null !== 0 !== undefined\n      tasks = tasks.filter(task => {\n        return task.name.toLowerCase().indexOf(filterName) !== -1;\n      });\n    }        \n    tasks = tasks.filter(task => {\n      if (filterStatus === -1) return task;\n      else return task.status === (filterStatus === 1 ? true : false);\n    });\n    if (keyword) {            \n      tasks = tasks.filter(task => {\n        return task.name.toLowerCase().indexOf(keyword.toLowerCase()) !== -1;\n      });\n    }\n\n    if (sortBy === 'name') {\n      tasks.sort((a, b) => {\n        if (a.name > b.name) return sortValue;\n        else if (a.name < b.name) return -sortValue;\n        else return 0;\n      });\n    } else {\n      tasks.sort((a, b) => {\n        if (a.status > b.status) return -sortValue;\n        else if (a.status < b.status) return sortValue;\n        else return 0;\n      });\n    }\n\n    return (\n      <div className=\"container\">\n        <div className=\"text-center\">\n          <h1>Task Management</h1><hr />\n        </div>\n        <div className=\"row\">\n          <div className={isDisplayForm ? 'col-xs-4 col-sm-4 col-md-4 col-lg-4' : 'col-xs-0 col-sm-0 col-md-0 col-lg-0'}>\n            <TaskForm />\n          </div>\n          <div className={isDisplayForm ? 'col-xs-8 col-sm-8 col-md-8 col-lg-8' : 'col-xs-12 col-sm-12 col-md-12 col-lg-12'}>\n            <button type=\"button\" className=\"btn btn-primary\" onClick={this.onToggleForm}>\n              <span className=\"fa fa-plus mr-5\"></span>Add your task\n            </button>\n            <TaskControl \n                onSearch={this.onSearch} \n                onSort={this.onSort}\n                sortBy={sortBy}\n                sortValue={sortValue}\n            />\n            <div className=\"row mt-15\">\n              <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                <TaskList onFilter={this.onFilter}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n    isDisplayForm: state.isDisplayForm,\n    taskEditing: state.taskEditing\n\t}\n};\nconst mapDispatchToProps = (dispatch, props) => {\n\treturn {\n\t\tonToggleForm: () => {\n\t\t\tdispatch(actions.toggleForm())\n    },\n    onClearTask: task => {\n\t\t\tdispatch(actions.editTask(task))\n    },\n    onOpenForm: () => {\n\t\t\tdispatch(actions.openForm())\n\t\t}\n\t}\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}