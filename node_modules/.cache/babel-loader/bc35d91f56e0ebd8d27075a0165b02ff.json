{"ast":null,"code":"var _jsxFileName = \"/home/binhcao/Desktop/task-management/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport TaskForm from './components/TaskForm';\nimport TaskControl from './components/TaskControl';\nimport TaskList from './components/TaskList';\nimport { findIndex } from 'lodash';\nimport { connect } from 'react-redux';\nimport * as actions from './actions/index';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onGenerateData = () => {\n      var tasks = [{\n        id: this.generateId(),\n        name: 'Learn programming',\n        status: true\n      }, {\n        id: this.generateId(),\n        name: 'Go swimming',\n        status: false\n      }, {\n        id: this.generateId(),\n        name: 'Go to bed',\n        status: true\n      }];\n      this.setState({\n        tasks\n      });\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n    };\n\n    this.onToggleForm = () => {\n      // if (this.state.isDisplayForm && this.state.taskEditing !== null) {\n      //   this.setState({             //TaskForm: modify --> add\n      //     isDisplayForm: true,\n      //     taskEditing: null\n      //   });\n      // }else{\n      //   this.setState({             \n      //     isDisplayForm: !this.state.isDisplayForm,\n      //     taskEditing: null\n      //   });\n      // }\n      this.props.onToggleForm();\n    };\n\n    this.onCloseForm = () => {\n      this.setState({\n        isDisplayForm: false\n      });\n    };\n\n    this.onShowForm = () => {\n      this.setState({\n        isDisplayForm: true\n      });\n    };\n\n    this.onUpdateStatus = id => {\n      var tasks = this.state.tasks;\n      var index = findIndex(tasks, task => {\n        return task.id === id;\n      });\n\n      if (index > -1) {\n        tasks[index].status = !tasks[index].status;\n        this.setState({\n          tasks\n        });\n        localStorage.setItem('tasks', JSON.stringify(tasks));\n      }\n    };\n\n    this.findIndex = id => {\n      var tasks = this.state.tasks;\n      var result = -1;\n      tasks.forEach((task, index) => {\n        if (task.id === id) result = index;\n      });\n      return result;\n    };\n\n    this.onDelete = id => {\n      var tasks = this.state.tasks;\n      var index = this.findIndex(id);\n\n      if (index > -1) {\n        tasks.splice(index, 1);\n        this.setState({\n          tasks\n        });\n        localStorage.setItem('tasks', JSON.stringify(tasks));\n      }\n\n      this.onCloseForm();\n    };\n\n    this.onUpdate = id => {\n      var tasks = this.state.tasks;\n      var index = this.findIndex(id);\n      var taskEditing = tasks[index];\n      this.setState({\n        taskEditing\n      });\n      this.onShowForm();\n    };\n\n    this.onFilter = (filterName, filterStatus) => {\n      filterStatus = parseInt(filterStatus, 10);\n      this.setState({\n        filterName: filterName.toLowerCase(),\n        filterStatus\n      });\n    };\n\n    this.onSearch = keyword => {\n      this.setState({\n        keyword\n      });\n    };\n\n    this.onSort = (sortBy, sortValue) => {\n      this.setState({\n        // Nhận từ state component dưới rồi chuyền props trở lại\n        sortBy,\n        sortValue\n      });\n    };\n\n    this.state = {\n      tasks: [],\n      isDisplayForm: false,\n      taskEditing: null,\n      //Based on taskEditing to know TaskForm is add or modify\n      filterName: '',\n      filterStatus: -1,\n      keyword: '',\n      sortBy: 'name',\n      // shouldn't object type\n      sortValue: 1\n    };\n  }\n\n  s4() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n\n  generateId() {\n    return this.s4() + this.s4() + '-' + this.s4() + '-' + this.s4() + '-' + this.s4() + '-' + this.s4() + this.s4() + this.s4();\n  }\n\n  render() {\n    var _this$state = this.state,\n        tasks = _this$state.tasks,\n        taskEditing = _this$state.taskEditing,\n        filterName = _this$state.filterName,\n        filterStatus = _this$state.filterStatus,\n        keyword = _this$state.keyword,\n        sortBy = _this$state.sortBy,\n        sortValue = _this$state.sortValue;\n    var isDisplayForm = this.props.isDisplayForm;\n\n    if (filterName) {\n      // !== null !== 0 !== undefined\n      tasks = tasks.filter(task => {\n        return task.name.toLowerCase().indexOf(filterName) !== -1;\n      });\n    }\n\n    tasks = tasks.filter(task => {\n      if (filterStatus === -1) return task;else return task.status === (filterStatus === 1 ? true : false);\n    });\n\n    if (keyword) {\n      tasks = tasks.filter(task => {\n        return task.name.toLowerCase().indexOf(keyword.toLowerCase()) !== -1;\n      });\n    }\n\n    if (sortBy === 'name') {\n      tasks.sort((a, b) => {\n        if (a.name > b.name) return sortValue;else if (a.name < b.name) return -sortValue;else return 0;\n      });\n    } else {\n      tasks.sort((a, b) => {\n        if (a.status > b.status) return -sortValue;else if (a.status < b.status) return sortValue;else return 0;\n      });\n    }\n\n    var elmTaskForm = isDisplayForm ? React.createElement(TaskForm, {\n      onCloseForm: this.onCloseForm,\n      taskEditing: taskEditing,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }) : '';\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"Task Management\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: isDisplayForm ? 'col-xs-4 col-sm-4 col-md-4 col-lg-4' : 'col-xs-0 col-sm-0 col-md-0 col-lg-0',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, elmTaskForm), React.createElement(\"div\", {\n      className: isDisplayForm ? 'col-xs-8 col-sm-8 col-md-8 col-lg-8' : 'col-xs-12 col-sm-12 col-md-12 col-lg-12',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary\",\n      onClick: this.onToggleForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"fa fa-plus mr-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }), \"Add your task\"), React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-danger ml-5\",\n      onClick: this.onGenerateData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \"Generate sample data\"), React.createElement(TaskControl, {\n      onSearch: this.onSearch,\n      onSort: this.onSort,\n      sortBy: sortBy,\n      sortValue: sortValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row mt-15\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(TaskList, {\n      onUpdateStatus: this.onUpdateStatus,\n      onDelete: this.onDelete,\n      onUpdate: this.onUpdate,\n      onFilter: this.onFilter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isDisplayForm: state.isDisplayForm\n  };\n};\n\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    onToggleForm: () => {\n      dispatch(actions.toggleForm());\n    },\n    onCloseForm: () => {\n      dispatch(actions.closeForm());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/home/binhcao/Desktop/task-management/src/App.js"],"names":["React","Component","TaskForm","TaskControl","TaskList","findIndex","connect","actions","App","constructor","props","onGenerateData","tasks","id","generateId","name","status","setState","localStorage","setItem","JSON","stringify","onToggleForm","onCloseForm","isDisplayForm","onShowForm","onUpdateStatus","state","index","task","result","forEach","onDelete","splice","onUpdate","taskEditing","onFilter","filterName","filterStatus","parseInt","toLowerCase","onSearch","keyword","onSort","sortBy","sortValue","s4","Math","floor","random","toString","substring","render","filter","indexOf","sort","a","b","elmTaskForm","mapStateToProps","mapDispatchToProps","dispatch","toggleForm","closeForm"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport TaskForm from './components/TaskForm';\nimport TaskControl from './components/TaskControl';\nimport TaskList from './components/TaskList';\nimport {findIndex} from 'lodash';\nimport { connect } from 'react-redux';\nimport * as actions from './actions/index';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: [],\n      isDisplayForm: false,\n      taskEditing: null,         //Based on taskEditing to know TaskForm is add or modify\n      filterName: '',\n      filterStatus: -1,\n      keyword: '',\n      sortBy: 'name',         // shouldn't object type\n      sortValue: 1\n    }\n  }\n\n  onGenerateData = () => {\n    var tasks = [\n      {\n        id: this.generateId(),\n        name: 'Learn programming',\n        status: true\n      },\n      {\n        id: this.generateId(),\n        name: 'Go swimming',\n        status: false\n      },\n      {\n        id: this.generateId(),\n        name: 'Go to bed',\n        status: true\n      }\n    ];\n    this.setState({\n      tasks\n    });\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }\n\n  s4() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n\n  generateId() {\n    return this.s4() + this.s4() + '-' + this.s4() + '-' + this.s4() + '-' + this.s4() + '-' + this.s4() + this.s4() + this.s4();\n  }\n\n  onToggleForm = () => {\n    // if (this.state.isDisplayForm && this.state.taskEditing !== null) {\n    //   this.setState({             //TaskForm: modify --> add\n    //     isDisplayForm: true,\n    //     taskEditing: null\n    //   });\n    // }else{\n    //   this.setState({             \n    //     isDisplayForm: !this.state.isDisplayForm,\n    //     taskEditing: null\n    //   });\n    // }\n    this.props.onToggleForm();\n  }\n\n  onCloseForm = () => {\n    this.setState({\n      isDisplayForm: false\n    });\n  }\n\n  onShowForm = () => {\n    this.setState({\n      isDisplayForm: true\n    });\n  }\n\n  onUpdateStatus = (id) => {\n    var {tasks} = this.state;\n    var index = findIndex(tasks, task => {\n      return task.id === id;\n    });\n    if (index > -1) {\n      tasks[index].status = !tasks[index].status;\n      this.setState({\n        tasks\n      });\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n    }\n  }\n\n  findIndex = (id) => {\n    var {tasks} = this.state;\n    var result = -1;\n    tasks.forEach((task, index) => {\n      if (task.id === id)\n        result = index;\n    });\n    return result;\n  }\n\n  onDelete = (id) => {\n    var {tasks} = this.state;\n    var index = this.findIndex(id);\n    if (index > -1) {\n      tasks.splice(index, 1);\n      this.setState({\n        tasks\n      });\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n    }\n    this.onCloseForm();\n  }\n\n  onUpdate = (id) => {\n    var {tasks} = this.state;\n    var index = this.findIndex(id);\n    var taskEditing = tasks[index];\n    this.setState({\n      taskEditing\n    });\n    this.onShowForm();\n  }\n\n  onFilter = (filterName, filterStatus) => {\n    filterStatus = parseInt(filterStatus, 10);\n    this.setState({\n        filterName: filterName.toLowerCase(),\n        filterStatus\n    });\n  }\n\n  onSearch = (keyword) => {\n    this.setState({\n      keyword\n    });\n  }\n\n  onSort = (sortBy, sortValue) => {\n    this.setState({             // Nhận từ state component dưới rồi chuyền props trở lại\n        sortBy,\n        sortValue\n    })\n  }\n\n  render() {\n    var { tasks, taskEditing, filterName, filterStatus, keyword, sortBy, sortValue } = this.state;\n    var {isDisplayForm} = this.props;\n    if (filterName) {            // !== null !== 0 !== undefined\n      tasks = tasks.filter(task => {\n        return task.name.toLowerCase().indexOf(filterName) !== -1;\n      });\n    }        \n    tasks = tasks.filter(task => {\n      if (filterStatus === -1) return task;\n      else return task.status === (filterStatus === 1 ? true : false);\n    });\n    if (keyword) {            \n      tasks = tasks.filter(task => {\n        return task.name.toLowerCase().indexOf(keyword.toLowerCase()) !== -1;\n      });\n    }\n\n    if (sortBy === 'name') {\n      tasks.sort((a, b) => {\n        if (a.name > b.name) return sortValue;\n        else if (a.name < b.name) return -sortValue;\n        else return 0;\n      });\n    } else {\n      tasks.sort((a, b) => {\n        if (a.status > b.status) return -sortValue;\n        else if (a.status < b.status) return sortValue;\n        else return 0;\n      });\n    }\n\n    var elmTaskForm = isDisplayForm \n      ? <TaskForm \n          onCloseForm={this.onCloseForm}\n          taskEditing={taskEditing}\n        /> \n      : '';\n    return (\n      <div className=\"container\">\n        <div className=\"text-center\">\n          <h1>Task Management</h1><hr />\n        </div>\n        <div className=\"row\">\n          <div className={isDisplayForm ? 'col-xs-4 col-sm-4 col-md-4 col-lg-4' : 'col-xs-0 col-sm-0 col-md-0 col-lg-0'}>\n            {elmTaskForm}\n          </div>\n          <div className={isDisplayForm ? 'col-xs-8 col-sm-8 col-md-8 col-lg-8' : 'col-xs-12 col-sm-12 col-md-12 col-lg-12'}>\n            <button type=\"button\" className=\"btn btn-primary\" onClick={this.onToggleForm}>\n              <span className=\"fa fa-plus mr-5\"></span>Add your task\n            </button>\n            <button type=\"button\" className=\"btn btn-danger ml-5\" onClick={this.onGenerateData}>\n              Generate sample data\n            </button>\n            <TaskControl \n                onSearch={this.onSearch} \n                onSort={this.onSort}\n                sortBy={sortBy}\n                sortValue={sortValue}\n            />\n            <div className=\"row mt-15\">\n              <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                <TaskList \n                  onUpdateStatus={this.onUpdateStatus}\n                  onDelete={this.onDelete}\n                  onUpdate={this.onUpdate}\n                  onFilter={this.onFilter}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tisDisplayForm: state.isDisplayForm\n\t}\n};\nconst mapDispatchToProps = (dispatch, props) => {\n\treturn {\n\t\tonToggleForm: () => {\n\t\t\tdispatch(actions.toggleForm())\n    },\n    onCloseForm: () => {\n\t\t\tdispatch(actions.closeForm())\n\t\t}\n\t}\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}